@page "/visualisation"

@using CryptoDCA.DomainLogic.Investments.Retriever
@using CryptoDCA.DomainLogic.Currency.Retriever;
@using System.Linq
@inject IInvestmentRetriever investmentRetrieve
@inject ICurrencyRetriever currencyRetriever

<div class="container mt-5">
    <h3 class="text-center mb-4">Total Investments by Cryptocurrency</h3>
    <p class="text-center mb-4">
        This chart represents the total investment amounts for each cryptocurrency you have invested in.
    </p>

    <br>
    <br>

    <div class="chart-container d-flex justify-content-center" style="position: relative; height: 400px; width: 100%;">
        <BarChart @ref="barChart" Width="500" Height="300" />
    </div>
</div>

@code {
    private BarChart barChart = default!;
    private BarChartOptions barChartOptions = default!;
    private ChartData chartData = default!;

   protected override async Task OnInitializedAsync()
{
    var currencies = await currencyRetriever.GetCryptoCurrencies();
    var investments = await investmentRetrieve.GetInvestmentsAsync();

    // Prepare labels and datasets for the chart
    var labels = currencies.Select(i => i.Symbol)
                           .Distinct()
                           .ToList();

    var datasets = new List<IChartDataset>();

    // Group investments by currency
    var investmentGroups = investments.GroupBy(i => i.Cryptocurrency);
    
    // Create datasets for each currency based on grouped investments
    foreach (var currency in currencies)
    {
        var i = 0;
        var dataset = new BarChartDataset()
        {
            Data = new List<double?>
            {
                investmentGroups
                    .Where(g => g.Key == currency.ProgId) // Ensure to match by ProgId
                    .Sum(g => g.Sum(i => (double?)i.InvestedAmount)) // Sum all InvestedAmounts
            },
            BorderColor = new List<string> { ColorUtility.CategoricalTwelveColors[i % ColorUtility.CategoricalTwelveColors.Length].ToString()} ,
            BackgroundColor = new List<string> { ColorUtility.CategoricalTwelveColors[i % ColorUtility.CategoricalTwelveColors.Length].ToString()},
            Label = currency.Symbol,
            BorderWidth = new List<double> { 0 },
        };

        datasets.Add(dataset);
        i++;
    }


    // Create chart data
    var chartData = new ChartData
    {
        Labels = labels,
        Datasets = datasets
    };

    // Initialize the chart
    await barChart.InitializeAsync(chartData, barChartOptions);
}

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await barChart.InitializeAsync(chartData, barChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}