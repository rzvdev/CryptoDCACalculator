@page "/visualisation"

@using CryptoDCA.DomainLogic.Investments.Retriever
@using CryptoDCA.DomainLogic.Currency.Retriever;
@using System.Linq
@inject IInvestmentRetriever investmentRetrieve
@inject ICurrencyRetriever currencyRetriever

<div class="container mt-5">
    <h3 class="text-center mb-4">Total Investments by Cryptocurrency</h3>
    <p class="text-center mb-4">
        This chart represents the total investment amounts for each cryptocurrency you have invested in.
    </p>

    <br>
    <br>

    <div class="chart-container d-flex justify-content-center" style="position: relative; height: 400px; width: 100%;">
        <BarChart @ref="barChart" Width="500" Height="300" />
    </div>
</div>

@code {
    private BarChart barChart = default!;
    private BarChartOptions barChartOptions = default!;
    private ChartData chartData = default!;

    protected override async Task OnInitializedAsync()
    {
        var currencies = await currencyRetriever.GetCryptoCurrencies();
        var investments = await investmentRetrieve.GetInvestmentsAsync();
        var labels = currencies.Select(i => i.Symbol)
                               .Distinct()
                               .ToList();
        var datasets = new List<IChartDataset>();
        Random random = new();


        var dataset1 = new BarChartDataset()
    {
               Data = labels.Select(label =>
           {
               // Find all investments where the cryptocurrency matches the label
               var investmentSum = investments
                   .Where(investment => investment.Cryptocurrency == label)
                   .Sum(investment => investment.InvestedAmount);

               return (double?)investmentSum;
           }).ToList(),
        BackgroundColor = new List<string> { ColorUtility.CategoricalTwelveColors[random.Next(0,12) % ColorUtility.CategoricalTwelveColors.Length].ToString() },
        BorderColor = new List<string> { ColorUtility.CategoricalTwelveColors[random.Next(0, 12) % ColorUtility.CategoricalTwelveColors.Length].ToString() },
        BorderWidth = new List<double> { 0 },
    };

    datasets.Add(dataset1);

    chartData = new ChartData { Labels = labels, Datasets = datasets };

    barChartOptions = new BarChartOptions();
    barChartOptions.Responsive = true;
    barChartOptions.Interaction = new Interaction { Mode = InteractionMode.Y };
    barChartOptions.IndexAxis = "y";

    barChartOptions.Scales.X!.Title = new ChartAxesTitle { Text = "Amount", Display = true };
    barChartOptions.Scales.Y!.Title = new ChartAxesTitle { Text = "Currency", Display = true };

    barChartOptions.Plugins.Legend.Display = false;

    // Initialize the chart
    await barChart.InitializeAsync(chartData, barChartOptions);
}

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await barChart.InitializeAsync(chartData, barChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}