@page "/"
@using CryptoDCA.DataModel.Context
@using CryptoDCA.DataModel.DTOs
@using CryptoDCA.DomainLogic.Currency.Retriever
@using CryptoDCA.DomainLogic.Services
@inject ICryptoService cryptoService
@inject ICurrencyRetriever currencyRetriever 

<link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet" />

<style>
    .purple-tinted-logo {
        filter: invert(34%) sepia(20%) saturate(500%) hue-rotate(240deg) brightness(100%) contrast(100%);
        width: 600px; 
    }
</style>

<div class="container mt-5">

    <div class="text-center mb-4">
        <img src="https://cdn.tokero.com/content/4/images/tokero-logo-white-crypto-exchange-2x.png" alt="Tokero Logo" class="purple-tinted-logo" />
    </div>

    <br />
    <br />

    <h3 class="text-center">Crypto DCA Calculator</h3>
    <h5 class="text-center text-muted">With pleasure for TOKERO</h5>

    <EditForm Model="investmentData" OnValidSubmit="CalculateDCA" class="mt-4">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="cryptoSelect">Select crypto</label>
            <select id="cryptoSelect" class="form-control" @bind="investmentData.SelectedCrypto">
                @if(currencies is null) {
                        <option>Loading...</option>
                } else {
                   @foreach (var currency in currencies)
                    {
                        <option value="@currency.ProgId">@currency.Name - @currency.ProgId</option>
                    }
                })
            </select>
        </div>

        <div class="form-group">
            <label for="startDate">Start investing date:</label>
            <InputDate id="startDate" class="form-control" @bind-Value="investmentData.StartDate"  />
        </div>

        <div class="form-group">
            <label for="monthlyInvestment">Mountly amount to invest (EUR):</label>
            <InputNumber id="monthlyInvestment" class="form-control" @bind-Value="investmentData.MonthlyInvestment" />
        </div>

        <div class="form-group">
            <label>Investment Period:</label>
            <select class="form-control" @bind="investmentData.InvestmentPeriod">
                  @if(investPeriods is null) {
                        <option>Loading...</option>
                } else {
                   @foreach (var period in investPeriods)
                    {
                        <option value="@period.ProgId">@period.Name</option>
                    }
                })
            </select>
        </div>

        <button type="submit" class="btn btn-primary btn-block">Calculate DCA</button>
    </EditForm>

    @if (dcaResults != null)
    {
            <h4 class="mt-4">Results:</h4>
            <table class="table table-striped mt-2">
                <thead class="thead-dark">
                    <tr>
                        <th>Date</th>
                        <th>Invested Amount</th>
                        <th>Crypto Currency</th>
                        <th>Crypto Amount</th>
                        <th>Value Today</th>
                        <th>ROI</th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var result in dcaResults)
                {
                            <tr>
                                <td>@result.Date.ToShortDateString()</td>
                                <td>@result.InvestedAmount.ToString("C", System.Globalization.CultureInfo.CurrentCulture)</td>
                                <td>@result.CryptoCurrency</tD>
                                <td>@result.CryptoAmount.ToString("F4")</td>
                                <td>@result.ValueToday.ToString("C", new System.Globalization.CultureInfo("en-US"))</td>
                                <td>@result.ROI.ToString("P2")</td>
                            </tr>
                }
                </tbody>
            </table>
    }
</div>

@code {
    private InvestmentData investmentData = new InvestmentData();
    private List<Currencies> currencies;
    private List<InvestPeriod> investPeriods;
    private List<DCAResultDto> dcaResults;


    private async Task CalculateDCA()
    {
        dcaResults = await cryptoService.CalculateDCA(investmentData);
    }

    protected override async Task OnInitializedAsync()
    {
         currencies = await currencyRetriever.GetCryptoCurrencies();
         investPeriods = await investments
    }
}